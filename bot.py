import logging
import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.markdown import text
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

from kinodef import search, info, search_genre, new_in
from config import TOKEN
from kinodef import kino
import keyboards as kb
import random

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

start_message = text(
    "–ü—Ä–∏–≤–µ—Ç üëã",
    "–ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç @movieproject_bot! –ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?",
    "–ù–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ –≤–≤–µ–¥–∏ /search + \
    \'—á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞\'",
    "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ /help",
    sep="\n")


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply(start_message, reply_markup=kb.markup_start)

help_message = text(
    "–≠—Ç–æ –±–æ—Ç —Å–æ–≤–µ—Ç—á–∏–∫ –ø–æ —Ñ–∏–ª—å–º–∞–º",
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n",
    "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
    "/search + \'—á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞\' - –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞",
    "/secret - –Ω–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è",
    sep="\n")


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply(help_message)


@dp.message_handler(commands=['secret'])
async def process_command_1(message: types.Message):
    await message.reply("–•–º–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ...", reply_markup=kb.inline_kb1)

error_message = text(
    "–ñ—É–ª–∏–∫, –∏–≥—Ä–∞–π –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º")

new_message = text(
    '–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–∏–Ω–∫–∏ –∫–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è üê£ \n–ï—Å–ª–∏ —Å–æ–±–µ—Ä—ë—à—å—Å—è –≤ –∫–∏–Ω–æ - –Ω–µ –∑–∞–±—É–¥—å –º–∞—Å–∫—É')

advice_message = text(
    '–û—Ç–ª–∏—á–Ω–æ üçø \n–Ø –≤—ã–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ —Ç–æ–ø–∞. –ö–∞–∫–æ–π –∂–∞–Ω—Ä —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?')


@dp.message_handler()
async def echo_message(message: types.Message):
    if message.text == 'ü•ß –ü–æ—Å–æ–≤–µ—Ç—É–π —Ñ–∏–ª—å–º':
        await message.reply(advice_message, reply_markup=kb.markup2)

    elif message.text == 'üçØ –ö–æ–º–µ–¥–∏—è':
        await message.reply(search_genre('–∫–æ–º–µ–¥–∏—è'))

    elif message.text == 'üêù –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞':
        await message.reply(search_genre('—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'))

    elif message.text == 'üß∫ –î—Ä–∞–º–∞':
        await message.reply(search_genre('–¥—Ä–∞–º–∞'))

    elif message.text == 'üç° –ë–æ–µ–≤–∏–∫':
        await message.reply(search_genre('–±–æ–µ–≤–∏–∫'))

    elif message.text == '–ù–∞–∑–∞–¥':
        await message.reply('–•–æ—Ä–æ—à–æ. –ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ?', reply_markup=kb.markup_start)

    elif message.text == 'üå∑ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º':
        num = random.randint(1, 5000)
        ans = info(num)
        await message.reply('–°–µ–π—á–∞—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ üå∫')
        await asyncio.sleep(2)
        await message.reply(ans, reply=False)

    elif message.text == 'üåæ –ß—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ?':
        await message.reply(new_message)
        await asyncio.sleep(2)
        await message.reply(new_in(), reply=False)

    elif message.text[:7] == '/search':
        await message.reply(search(message.text[7:]))

    else:
        await message.reply(error_message)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
