import logging
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.markdown import text
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

from kinodef import search, info, search_genre, new_in
from config import TOKEN
from kinodef import kinopoisk
import keyboards as kb
import random

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

##

start_message = text(
    "–ü—Ä–∏–≤–µ—Ç üëã",
    "–ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç @movieproject_bot! –ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?",
    "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ /help",
    sep="\n"
)

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply(start_message, reply_markup=kb.markup_start)

##

help_message = text(
    "–≠—Ç–æ –±–æ—Ç —Å–æ–≤–µ—Ç—á–∏–∫ –ø–æ —Ñ–∏–ª—å–º–∞–º",
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n",
    "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
    "/search + \'—á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞\' - –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞",
    "/search_full + \'–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\' - –∏–Ω—Ñ–æ –æ —Ñ–∏–ª—å–º–µ –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é",
    "/secret - –Ω–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è",
    sep="\n"
)

@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply(help_message)

##

@dp.message_handler(commands=['secret'])
async def process_command_1(message: types.Message):
    await message.reply("–•–º–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ...", reply_markup=kb.inline_kb1)

##
'''
@dp.message_handler(commands=['search'])
async def process_search_command(message: types.Message):
    await message.reply(search(message))
'''
##
'''
@dp.message_handler(commands=['search_full'])
async def process_fullsearch_command(message: types.Message):
    await message.reply(search(message))
'''
##

error_message = text(
    "–ñ—É–ª–∏–∫, –∏–≥—Ä–∞–π –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º(–Ω—É –∏–ª–∏ —è –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª —ç—Ç—É –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞)"
)

@dp.message_handler()
async def echo_message(message: types.Message):
    if message.text == 'ü•ß –ü–æ—Å–æ–≤–µ—Ç—É–π —Ñ–∏–ª—å–º':
        await message.reply('–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä', reply_markup=kb.markup2)

    elif message.text == 'üçØ –ö–æ–º–µ–¥–∏—è':
        await message.reply(search_genre('–∫–æ–º–µ–¥–∏—è'))

    elif message.text == 'üêù –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞':
        await message.reply(search_genre('—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'))

    elif message.text == 'üß∫ –î—Ä–∞–º–∞':
        await message.reply(search_genre('–¥—Ä–∞–º–∞'))

    elif message.text == 'üç° –ë–æ–µ–≤–∏–∫':
        await message.reply(search_genre('–±–æ–µ–≤–∏–∫'))

    elif message.text == '–ù–∞–∑–∞–¥':
        await message.reply('–•–æ—Ä–æ—à–æ. –ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ?', reply_markup=kb.markup_start)

    elif message.text == 'üå∑ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º':
        num = random.randint(1, 5000)
        ans = info(num)
        t = kinopoisk.get_film(num)

        await message.reply(ans)

    elif message.text == 'üåæ –ß—Ç–æ —Å–µ–π—á–∞—Å –≤ –∫–∏–Ω–æ?':
        await message.reply(new_in())

    elif message.text[:7] == '/search':
        await message.reply(search(message.text[7:]))


    else:
        await message.reply(error_message)

##

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
